/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Ticketnode API
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import type { Arguments, Key, SWRConfiguration } from 'swr';

import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';

import { customInstanceSWR } from '../mutators/tickets-swr';
export interface Ticket {
  id: string;
  name: string;
  description?: string;
  price: number;
  availableQuantity: number;
}

export interface PurchaseTicketsBody {
  ticketId: string;
  customerFirstName: string;
  customerLastName: string;
  customerEmail: string;
  ticketQuantity: number;
}

export interface PurchaseResponse {
  orderId: string;
  checkoutUrl: string;
}

export interface ErrorResponse {
  code: string;
  message: string;
}

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get available ticket types for an event
 */
export const getGetEventTicketsUrl = (eventId: string) => {
  return `/v1/events/${eventId}/tickets`;
};

export const getEventTickets = async (
  eventId: string,
  options?: RequestInit
): Promise<Ticket[]> => {
  return customInstanceSWR<Ticket[]>(getGetEventTicketsUrl(eventId), {
    ...options,
    method: 'GET',
  });
};

export const getGetEventTicketsKey = (eventId: string) =>
  [`/v1/events/${eventId}/tickets`] as const;

export type GetEventTicketsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventTickets>>
>;
export type GetEventTicketsQueryError = ErrorResponse;

export const useGetEventTickets = <TError = ErrorResponse>(
  eventId: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getEventTickets>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof customInstanceSWR>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!eventId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetEventTicketsKey(eventId) : null));
  const swrFn = () => getEventTickets(eventId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Purchase event tickets
 */
export const getPurchaseTicketsUrl = (eventId: string) => {
  return `/v1/events/${eventId}/tickets/purchase`;
};

export const purchaseTickets = async (
  eventId: string,
  body: PurchaseTicketsBody,
  options?: RequestInit
): Promise<PurchaseResponse> => {
  return customInstanceSWR<PurchaseResponse>(getPurchaseTicketsUrl(eventId), {
    ...options,
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    body: JSON.stringify(body),
  });
};

export const getPurchaseTicketsMutationFetcher = (
  eventId: string,
  options?: SecondParameter<typeof customInstanceSWR>
) => {
  return (
    _: Key,
    { arg }: { arg: PurchaseTicketsBody }
  ): Promise<PurchaseResponse> => {
    return purchaseTickets(eventId, arg, options);
  };
};
export const getPurchaseTicketsMutationKey = (eventId: string) =>
  [`/v1/events/${eventId}/tickets/purchase`] as const;

export type PurchaseTicketsMutationResult = NonNullable<
  Awaited<ReturnType<typeof purchaseTickets>>
>;
export type PurchaseTicketsMutationError = ErrorResponse;

export const usePurchaseTickets = <TError = ErrorResponse>(
  eventId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof purchaseTickets>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof purchaseTickets>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof customInstanceSWR>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPurchaseTicketsMutationKey(eventId);
  const swrFn = getPurchaseTicketsMutationFetcher(eventId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
